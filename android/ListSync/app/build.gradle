import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs'
}

ext {
    spotbugs_version = '4.2.0'
    dagger_version = '2.17'
    glide_version = '4.11.0'

    reports_dir = "${buildDir}/reports"
    etc_dir = "${rootDir}/etc"
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.couchbase.android.listsync"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures { viewBinding = true }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    maven { url "https://mobile.maven.couchbase.com/maven2/dev" }
    google()
    jcenter()
}

configurations.all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }

dependencies {
    // compiler extensions
    annotationProcessor "com.google.dagger:dagger-compiler:${dagger_version}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${dagger_version}"
    annotationProcessor "com.github.bumptech.glide:compiler:${glide_version}"

    // annotations
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_version}"

    // androidx components
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment:2.3.2'
    implementation 'androidx.navigation:navigation-ui:2.3.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'

    implementation 'com.google.android.material:material:1.2.1'

    implementation 'com.google.android.gms:play-services-nearby:17.0.0'

    // dagger
    implementation "com.google.dagger:dagger-android:${dagger_version}"

    // rx-java
    implementation 'io.reactivex.rxjava2:rxjava:2.2.20'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // glide
    implementation "com.github.bumptech.glide:glide:${glide_version}"

    // couchbase
    implementation 'com.couchbase.lite:couchbase-lite-android-ee:2.8.1'

    // testing...
    testImplementation 'junit:junit:4.13.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def FILE_FILTER = [
    // ignore anything generated by Dagger
    '**/*_*.class',
    '**/Dagger*.class',
    // ignore the generated UI bindings
    '**/*Binding.class',
    // ignore the generated navigation
    '**/*Directions$*.class',
    '**/*Args.class']


/////// Checkstyle
checkstyle {
    toolVersion = "8.35"

    configFile file("${etc_dir}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${etc_dir}/checkstyle")]

    showViolations true
}
task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    source android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    classpath = files()

    reports {
        xml {
            enabled = true
            setDestination(file("${reports_dir}/checkstyle.xml"))
        }
        html {
            enabled = true
            setDestination(file("${reports_dir}/checkstyle.html"))
        }
    }
}

/////// PMD
pmd {
    toolVersion '6.26.0'
    ruleSets = []
}
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${etc_dir}/pmd/pmd.xml")

    source = android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    reports {
        xml {
            enabled = true
            setDestination(file("${reports_dir}/pmd.xml"))
        }
        html {
            enabled = true
            setDestination(file("${reports_dir}/pmd.html"))
        }
    }
}

/////// PMD
spotbugs { toolVersion = spotbugs_version }
['Html', 'Xml'].each { reportType ->
    task("spotbugs${reportType}", type: SpotBugsTask) {
        description "Spotbugs with ${reportType} report"
        group 'verification'

        afterEvaluate { dependsOn tasks.find { t -> t.name.endsWith 'compileDebugSources' } }

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        sourceDirs = project.files(android.sourceSets.main.java.srcDirs)

        classDirs = fileTree(
            dir: "${buildDir}/intermediates/javac/debug/classes",
            excludes: FILE_FILTER)

        excludeFilter = file("${etc_dir}/spotbugs/spotbugs.xml")

        reports {
            xml {
                enabled = (reportType == "Xml")
                setDestination(file("${reports_dir}/spotbugs.xml"))
            }
            html {
                enabled = (reportType == "Html")
                setDestination(file("${reports_dir}/spotbugs.html"))
            }
        }
    }
}

task smokeTest(dependsOn: ['compileDebugSources', 'checkstyle', 'lint', 'pmd', 'spotbugsHtml'])
